// Copyright 2019 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.cloud.broker.hadoop.fs;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.AccessController;
import java.security.Principal;
import java.util.Base64;
import javax.security.auth.Subject;

import org.ietf.jgss.GSSException;

import io.grpc.ManagedChannel;
import io.grpc.Metadata;
import io.grpc.stub.MetadataUtils;
import org.apache.hadoop.conf.Configuration;

// Classes dynamically generated by protobuf-maven-plugin:
import com.google.cloud.broker.protobuf.BrokerGrpc;


public final class BrokerGateway {

    protected BrokerGrpc.BrokerBlockingStub stub;
    protected ManagedChannel managedChannel;
    protected Configuration config;

    public BrokerGateway(Configuration config) {
        this(config,null);
    }

    public BrokerGateway(Configuration config, String sessionToken) {
        this.config = config;

        String brokerHostname = config.get("gcp.token.broker.uri.hostname", "localhost");
        int brokerPort = config.getInt("gcp.token.broker.uri.port", 443);
        boolean tlsEnabled = config.getBoolean("gcp.token.broker.tls.enabled", true);
        String tlsCertificate = config.get("gcp.token.broker.tls.certificate");
        if (tlsCertificate == null) {
            String tlsCerfiticatePath = config.get("gcp.token.broker.tls.certificate.path");
            if (tlsCerfiticatePath != null) {
                try {
                    tlsCertificate = new String(Files.readAllBytes(Paths.get(tlsCerfiticatePath)), StandardCharsets.US_ASCII);
                } catch (IOException e) {
                    throw new RuntimeException("Error reading the TLS certificate file: " + e.getMessage());
                }
            } else {
                tlsCertificate = "";
            }
        }

        managedChannel = GrpcUtils.newManagedChannel(brokerHostname, brokerPort, tlsEnabled, tlsCertificate);
        stub = GrpcUtils.newStub(managedChannel);

        if (sessionToken != null) {
            setSessionToken(sessionToken);
        }
        else {
            try {
                setSPNEGOToken();
            } catch (GSSException e) {
                // Clean up the channel before re-throwing the exception
                managedChannel.shutdownNow();
                throw new RuntimeException(
                    "User is not logged-in with Kerberos or cannot authenticate with the broker. Kerberos error message: " + e.getMessage());
            }
        }
    }

    public BrokerGrpc.BrokerBlockingStub getStub() {
        return stub;
    }

    public ManagedChannel getManagedChannel() {
        return managedChannel;
    }

    private void setSPNEGOToken() throws GSSException {
        String brokerServiceName = config.get("gcp.token.broker.servicename", "broker");
        String brokerHostname = config.get("gcp.token.broker.uri.hostname", "localhost");

        // Figure out the broker's realm
        String brokerRealm = config.get("gcp.token.broker.realm", "");
        if (brokerRealm.equals("")) {
            // If no realm is provided, use the logged-in user's realm
            Subject subject = Subject.getSubject(AccessController.getContext());
            Principal principal = subject.getPrincipals().iterator().next();
            String username = principal.getName();
            brokerRealm = username.substring(username.indexOf("@") + 1);
        }

        // Create the SPNEGO token
        byte[] rawToken = SpnegoUtils.newSPNEGOToken(brokerServiceName, brokerHostname, brokerRealm);
        String encodedToken = Base64.getEncoder().encodeToString(rawToken);

        // Set the 'authorization' header with the SPNEGO token
        Metadata metadata = new Metadata();
        Metadata.Key<String> key = Metadata.Key.of("authorization", Metadata.ASCII_STRING_MARSHALLER);
        metadata.put(key, "Negotiate " + encodedToken);
        stub = MetadataUtils.attachHeaders(stub, metadata);
    }

    private void setSessionToken(String sessionToken) {
        // Set the session token in the 'authorization' header
        Metadata metadata = new Metadata();
        Metadata.Key<String> key = Metadata.Key.of("authorization", Metadata.ASCII_STRING_MARSHALLER);
        metadata.put(key, "BrokerSession " + sessionToken);
        stub = MetadataUtils.attachHeaders(stub, metadata);
    }

}